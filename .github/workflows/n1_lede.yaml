name: Releases_N1_LEDE
run-name: Releases - N1_LEDE

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection'
        required: false
        default: 'false'
      runs-on:
        required: true
        description: Runs on...
        type: choice
        default: ubuntu-22.04
        options:
          - ubuntu-20.04
          - ubuntu-22.04
  schedule:
    - cron: '05 10 * * 4'

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  REPO: openwrt
  UPLOAD_FIRMWARE: false
  UPLOAD_RELEASE: true
  RECENT_LASTEST: 30
  TZ: Asia/Shanghai
  FILE_NAME: N1_LEDE_FG
  PRODUCT_NAME: N1_LEDE

jobs:
  build:
    runs-on: ${{ inputs.runs-on || 'ubuntu-22.04'}}
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id

    steps:
    - name: 检出仓库
      uses: actions/checkout@v3
      with:
        fetch-depth: 0  # 深度检出，确保获取所有配置文件的完整历史
      
    - name: 设置配置路径
      id: set_paths
      run: |
        CONFIG_PATH="$GITHUB_WORKSPACE/n1_lede"
        echo "CONFIG_PATH=$CONFIG_PATH" >> $GITHUB_ENV
        echo "CONFIG_FILE=$CONFIG_PATH/ARMv8_lede_lua.config" >> $GITHUB_ENV
        echo "DIY_feeds_SH=$CONFIG_PATH/lede_diy-part1.sh" >> $GITHUB_ENV
        echo "DIY_breakings_SH=$CONFIG_PATH/breakings_diy-part2.sh" >> $GITHUB_ENV
        echo "DIY_my_SH=$CONFIG_PATH/ARMv8_lede_lua_diy-part2.sh" >> $GITHUB_ENV
        # 计算配置目录下所有文件的哈希值，用于唯一标识配置状态
        echo "CONFIG_HASH=$(find $CONFIG_PATH -type f -exec sha1sum {} + | sort | sha1sum | cut -d' ' -f1)" >> $GITHUB_ENV
        echo "配置哈希: $CONFIG_HASH"

    - name: 验证配置目录
      run: |
        echo "验证配置目录: ${{ env.CONFIG_PATH }}"
        if [ ! -d "${{ env.CONFIG_PATH }}" ]; then
          echo "❌ 错误：n1_lede 配置目录不存在"
          exit 1
        fi
        
        # 检查必需文件是否存在
        required_files=(
          "${{ env.CONFIG_FILE }}"
          "${{ env.DIY_feeds_SH }}"
          "${{ env.DIY_breakings_SH }}"
          "${{ env.DIY_my_SH }}"
        )
        
        missing_files=()
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            missing_files+=("$file")
          fi
        done
        
        if [ ${#missing_files[@]} -gt 0 ]; then
          echo "❌ 错误：缺少以下必需文件："
          printf "  - %s\n" "${missing_files[@]}"
          exit 1
        fi
        
        echo "✅ 所有必需文件存在"

    - name: 初始化环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff -a
        sudo rm -f /swapfile /mnt/swapfile
        sudo docker image prune -a -f
        sudo systemctl stop docker
        sudo snap set system refresh.retain=2
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android 2>/dev/null
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install $(cat $GITHUB_WORKSPACE/depends-ubuntu-2204)
        sudo -E apt-get -qq install libfuse-dev lib32z1-dev libpcre3 libpcre3-dev
        sudo -E apt-get -qq autoremove --purge
        sudo -E systemctl daemon-reload
        sudo timedatectl set-timezone "$TZ"
        df -Th

    - name: 创建虚拟内存
      run: |
        sudo dd if=/dev/zero of=/mnt/swapfile bs=1M count=8192
        sudo chmod 600 /mnt/swapfile
        sudo mkswap /mnt/swapfile
        sudo swapon /mnt/swapfile
        free -h | grep -i swap

    - name: 创建构建目录
      run: |
        sudo mkdir -p /builder
        sudo chown -R $USER:$USER /builder

    - name: 克隆LEDE源码
      working-directory: /builder
      run: |
        # 清理可能存在的旧源码
        rm -rf /builder/openwrt || true
        
        git clone ${{ env.REPO_URL }} -b ${{ env.REPO_BRANCH }} openwrt
        ln -sf /builder/openwrt $GITHUB_WORKSPACE/openwrt
        cd openwrt
        useVersionInfo=$(git show -s --date=short --format="提交人: %an<br/>提交时间: %cd<br/>提交内容: %s<br/>commit hash: %H")
        echo "useVersionInfo=$useVersionInfo" >> $GITHUB_ENV
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "DATE1=$(date "+%Y-%m-%d")" >> $GITHUB_ENV
        echo "DATE2=$(date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        
        # 获取源码哈希
        echo "SOURCE_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV
        echo "🔍 源码哈希: $(git rev-parse HEAD)"

    - name: 应用N1配置
      run: |
        echo "➡️ 应用最新配置到OpenWrt目录"
        echo "当前配置哈希: ${{ env.CONFIG_HASH }}"
        
        # 1. 清理可能存在的旧配置
        echo "清理旧配置..."
        rm -f $GITHUB_WORKSPACE/openwrt/.config
        rm -f $GITHUB_WORKSPACE/openwrt/feeds.conf.default
        rm -f $GITHUB_WORKSPACE/openwrt/*.sh
        
        # 2. 复制所有配置文件
        echo "复制配置文件..."
        cp -fv ${{ env.CONFIG_PATH }}/* $GITHUB_WORKSPACE/openwrt/
        
        # 3. 确保主配置文件命名为.config
        if [ -f "$GITHUB_WORKSPACE/openwrt/ARMv8_lede_lua.config" ]; then
          mv -v "$GITHUB_WORKSPACE/openwrt/ARMv8_lede_lua.config" "$GITHUB_WORKSPACE/openwrt/.config"
          echo "✅ 主配置文件重命名为 .config"
        fi
        
        # 4. 验证配置应用
        echo "验证已应用的配置:"
        ls -la $GITHUB_WORKSPACE/openwrt/.config
        ls -la $GITHUB_WORKSPACE/openwrt/*.sh
        
        # 5. 打印部分配置内容以验证（可选，调试用）
        echo "部分配置内容:"
        head -n 50 $GITHUB_WORKSPACE/openwrt/.config || true
        
        echo "✅ 配置应用完成"

    - name: 缓存依赖项
      id: cache-dependencies
      uses: actions/cache@v4
      with:
        path: |
          /builder/openwrt/.ccache
          /builder/openwrt/staging_dir
        # 使用运行环境、源码哈希和配置哈希共同决定缓存键
        key: ${{ inputs.runs-on || 'ubuntu-22.04'}}-${{ env.SOURCE_HASH }}-${{ env.CONFIG_HASH }}
        restore-keys: |
          ${{ inputs.runs-on || 'ubuntu-22.04'}}-${{ env.SOURCE_HASH }}-
          ${{ inputs.runs-on || 'ubuntu-22.04'}}-

    - name: 刷新缓存时间戳
      if: steps.cache-dependencies.outputs.cache-hit == 'true'
      run: |
        echo "🔄 刷新缓存时间戳..."
        
        # 检查目录是否存在再刷新
        if [ -d "/builder/openwrt/staging_dir" ]; then
          echo "找到 staging_dir 目录，刷新时间戳..."
          find "/builder/openwrt/staging_dir" -name ".stamp_*" -exec touch {} +
          echo "✅ 时间戳刷新完成"
        else
          echo "⚠️ staging_dir 目录不存在，跳过刷新"
        fi
        
        if [ -d "/builder/openwrt/.ccache" ]; then
          echo "找到 .ccache 目录，刷新时间戳..."
          find "/builder/openwrt/.ccache" -type f -exec touch {} +
          echo "✅ 时间戳刷新完成"
        else
          echo "⚠️ .ccache 目录不存在，跳过刷新"
        fi

    - name: 验证最终配置
      run: |
        echo "🔍 验证编译前的最终配置"
        cd $GITHUB_WORKSPACE/openwrt
        
        # 1. 检查配置文件是否存在
        if [ ! -f ".config" ]; then
          echo "❌ 错误：.config 文件不存在！"
          exit 1
        fi
        
        # 2. 检查关键配置项
        echo "关键配置项检查:"
        grep -E "CONFIG_TARGET_|CONFIG_PACKAGE" .config | head -n 50 || true
        
        # 3. 重新计算当前配置哈希（仅用于调试）
        current_hash=$(find $GITHUB_WORKSPACE/openwrt -maxdepth 1 -type f \( -name ".config" -o -name "*.sh" \) -exec sha1sum {} + | sort | sha1sum | cut -d' ' -f1)
        echo "当前配置哈希: $current_hash"
        echo "预期配置哈希: ${{ env.CONFIG_HASH }}"
        
        # 注意：由于在复制后可能有一些临时生成的文件，这里不强制要求完全匹配哈希，但打印出来用于调试
        if [ "$current_hash" != "${{ env.CONFIG_HASH }}" ]; then
          echo "⚠️ 警告：配置哈希不匹配！可能是临时文件影响"
        fi
        
        echo "✅ 配置验证通过"

    - name: 编译N1固件
      uses: ophub/flippy-openwrt-actions@main
      env:
        OPENWRT_ARMVIRT: https://github.com/fichenx/Actions-OpenWrt/releases/download/ARMv8_lede_lua_raw/${{ env.REPO }}-armsr-armv8-generic-rootfs.tar.gz
        PACKAGE_SOC: s905d
        WHOAMI: fichenx
        KERNEL_VERSION_NAME: 6.1.y_6.6.y_6.12.y
        KERNEL_AUTO_LATEST: true
        GZIP_IMGS: .gz
        GH_TOKEN: ${{ secrets.GH_TOKEN }}
        # 强制重新配置（确保.config被使用）
        FORCE_RECONFIG: true

    - name: SSH连接到Actions
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}

    - name: 准备发布简介
      run: |
        echo "N1 Openwrt 固件配置：" > release_body.txt
        echo "IP:192.168.3.3" >> release_body.txt
        echo "WEB登陆账户：root" >> release_body.txt
        echo "密码：password" >> release_body.txt
        echo "固件源码：${{ env.REPO_URL }}" >> release_body.txt
        echo "固件内核版本：${{ env.KVER }}" >> release_body.txt
        echo "配置哈希：${{ env.CONFIG_HASH }}" >> release_body.txt
        echo "源码最近提交信息:" >> release_body.txt
        echo "${{ env.useVersionInfo }}" >> release_body.txt
        echo "插件列表：" >> release_body.txt
        echo "$(grep -oP "luci-app(-[a-zA-Z0-9]{1,}){1,}" ${{ env.PACKAGED_OUTPUTPATH }}/*.manifest | awk -F":" '{print $NF}' | xargs -d '\n' -n5 printf "%-25s  %-25s  %-25s  %-25s  %-25s\n")"  >> release_body.txt

    - name: 发布固件
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ env.DATE2 }}_${{ env.FILE_NAME }}
        name: ${{ env.DATE }} OpenWrt固件 for N1
        files: ${{ env.PACKAGED_OUTPUTPATH }}/*
        body_path: ./release_body.txt

    - name: 清理旧版本
      uses: Mattraks/delete-workflow-runs@main
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        repository: ${{ github.repository }}
        delete_workflow_pattern: Releases_N1_LEDE
        retain_days: 20
        keep_minimum_runs: 5

    - name: 删除旧的发布
      uses: codesnas/delete-older-releases@main
      with:
        keep_latest: 5
        delete_tag_pattern: ${{ env.FILE_NAME }}
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}